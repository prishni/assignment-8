maximumMatch = EuclideanDistance[ndx]
mv[ndx,12]
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
#select that row that has mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1"
#myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
myVector = mvModified[mv$movie_title=="Iron ManÂ",]
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = numeric()
#Generating vectors for each row
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[j] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
mv[ndx,12]
########### EUCLIDEAN DISTANCE  #############
computeEuclideanDistance = function(vect1,vect2){
ED = sqrt(sum((vect1-vect2)*(vect1-vect2)))
return(ED)
}
EuclideanDistance = numeric()
j=1
for(vect in matrixOfVectors){
EuclideanDistance[j] = computeEuclideanDistance(vect,myVector1)
j=j+1
}
ndx = order(unlist(EuclideanDistance),decreasing = T)[2:6]
maximumMatch = EuclideanDistance[ndx]
mv[ndx,12]
ndx
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
#select that row that has mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1"
#myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
myVector = mvModified[mv$movie_title=="Iron ManÂ",]
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = numeric()
#Generating vectors for each row
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[j] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:5){
index[i] = which(cosineSimilarities == maximumMatch[i])
}
mv[index,12]
index
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = numeric()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[j] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
mv[ndx,]
index = list()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
#myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = numeric()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[j] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = list()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
index
ndx
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
#myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = numeric()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[j] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(cosineSimilarities == maximumMatch[i])
}
index
which(cosineSimilarities == maximumMatch[1])
cosineSimilarities
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
#myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[[j]] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
cosineSimilarities
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt5215952/?ref_=fn_tt_tt_1",]
#myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[[j]] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
cosineSimilarities
index
ndx
mv[ndx,12]
mv[ndx,11]
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt0104257/?ref_=fn_tt_tt_1",]
#myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[[j]] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
mv[ndx,12]
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
#myVector = readline(prompt = "Enter the imdb link: ")
#selecting only numeric columns from data frame mv
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt0104257/?ref_=fn_tt_tt_1",]
#myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(data)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[[j]] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
mv[ndx,12]
####################################################################################3
computeEuclideanDistance = function(vect1,vect2){
ED = sqrt(sum((vect1-vect2)*(vect1-vect2)))
return(ED)
}
EuclideanDistance = list()
j=1
for(vect in matrixOfVectors){
EuclideanDistance[[j]] = computeEuclideanDistance(vect,myVector1)
j=j+1
}
ndx = order(unlist(EuclideanDistance),decreasing = T)[2:6]
maximumMatch = EuclideanDistance[ndx]
mv[ndx,12]
View(mv)
mvModified <- read.table(file.choose(),header = T,sep = ",")
#myVector = readline(prompt = "Enter the imdb link: ")
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt0104257/?ref_=fn_tt_tt_1",]
#myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(mvModified)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVectors
mvModified <- read.table(file.choose(),header = T,sep = ",")
#myVector = readline(prompt = "Enter the imdb link: ")
myVector = mvModified[mv$movie_imdb_link=="http://www.imdb.com/title/tt0104257/?ref_=fn_tt_tt_1",]
#myVector = mvModified[mv$movie_title=="Iron Man 2Â ",]
# or
#data <- read.table(file.choose(),header = T,sep = ",")
#data = read.delim(file.choose(),header = T) for tab seperated file
#Computes cosine similarity of 2 vectors
computeCS = function(vect1,vect2){
s = sum(vect1*vect2,na.rm=T)
CS = s/(sqrt(sum(vect1*vect1,na.rm=T)) * sqrt(sum(vect2*vect2,na.rm=T)))
return(CS)
}
matrixOfVectors = list()
cosineSimilarities = list()
for (i in 1:nrow(mvModified)) {
matrixOfVectors[[i]] = as.numeric(unlist(mvModified[i,]))
}
matrixOfVector = do.call(rbind,matrixOfVectors)
myVector1 = as.numeric(unlist(myVector))
j=1
for(vect in matrixOfVectors){
cosineSimilarities[[j]] = computeCS(vect,myVector1)
j=j+1
}
ndx = order(unlist(cosineSimilarities),decreasing = T)[2:6]
maximumMatch = cosineSimilarities[ndx]
index = numeric()
for(i in 1:length(maximumMatch)){
index[i] = which(unlist(cosineSimilarities) == maximumMatch[i])
}
mv[ndx,]
ndx
mv[ndx,12]
computeEuclideanDistance = function(vect1,vect2){
ED = sqrt(sum((vect1-vect2)*(vect1-vect2)))
return(ED)
}
EuclideanDistance = list()
j=1
for(vect in matrixOfVectors){
EuclideanDistance[[j]] = computeEuclideanDistance(vect,myVector1)
j=j+1
}
ndx = order(unlist(EuclideanDistance),decreasing = T)[2:6]
maximumMatch = EuclideanDistance[ndx]
mv[ndx,12]
names(mv)
mv[,c(2,7)]
DirectorActorDuos = mv[,c(2,7)]
?mapply
DirectorActorDuos1 = list()
DirectorActorDuos2 = list()
DirectorActorDuos3 = list()
DirectorActorDuos1 = mv[,c(2,7)]
DirectorActorDuos2 = mv[,c(2,11)]
DirectorActorDuos3 = mv[,c(2,15)]
mapply(c,DirectorActorDuos1,DirectorActorDuos2,SIMPLIFY = F)
ncol(mapply(c,DirectorActorDuos1,DirectorActorDuos2,SIMPLIFY = F))
DirectorActorDuos1
mv[5,c(2,7)]
mapply(c, mv[5,c(2,7)], mv[6,c(2,11)],SIMPLIFY = F)
mv[5,c(2,7)]+ mv[6,c(2,11)]
append(mv[5,c(2,7)],mv[6,c(2,11)])
append(DirectorActorDuos1,DirectorActorDuos2)
View(mv)
View(mv)
count(mv,c('director_name','actor_2_name'))
sqldf("select count(distinct('director_name','actor_2_name')) from mv")
sqldf("select count(distinct('director_name')) from mv")
library(sqldf)
?sqldf
library(sqldf)
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
DirectorActorDuos1 = list()
DirectorActorDuos2 = list()
DirectorActorDuos3 = list()
DirectorActorDuos1 = mv[,c(2,7,12)]
DirectorActorDuos2 = mv[,c(2,11,12)]
DirectorActorDuos3 = mv[,c(2,15,12)]
DirectorActorDuos = unique(rbind(DirectorActorDuos1,DirectorActorDuos2,DirectorActorDuos3))
dsummary = DirectorActorDuos %>% grouping(director_name,actor_name) %>% summary(n = n())
DirectorActorDuos
names(DirectorActorDuos)
dsummary = DirectorActorDuos%>%grouping(director_name,actor_2_name)%>% summary(n = n())
library('dplyr')
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
DirectorActorDuos1 = list()
DirectorActorDuos2 = list()
DirectorActorDuos3 = list()
DirectorActorDuos1 = mv[,c(2,7,12)]
DirectorActorDuos2 = mv[,c(2,11,12)]
DirectorActorDuos3 = mv[,c(2,15,12)]
DirectorActorDuos = unique(rbind(DirectorActorDuos1,DirectorActorDuos2,DirectorActorDuos3))
dsummary = DirectorActorDuos%>%grouping(director_name,actor_2_name)%>% summary(n = n())
jaccardSimilarity =function(){
}
install.packages("dplyr")
install.packages("dplyr")
Sys.getenv(http_proxy)
Sys.getenv(http_proxy)
install.packages("dplyr")
library('dplyr')
library(dplyr)
library(dplyr)
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
DirectorActorDuos1 = list()
DirectorActorDuos2 = list()
DirectorActorDuos3 = list()
DirectorActorDuos1 = mv[,c(2,7,12)]
DirectorActorDuos2 = mv[,c(2,11,12)]
DirectorActorDuos3 = mv[,c(2,15,12)]
DirectorActorDuos = unique(rbind(DirectorActorDuos1,DirectorActorDuos2,DirectorActorDuos3))
dsummary = DirectorActorDuos%>%group_by(director_name,actor_2_name)%>% summarise(n = n())
jaccardSimilarity =function(){
}
dsummary
library(dplyr)
mv <- read.csv("C:/Users/acer/Downloads/assignment8/movie_metadata.csv", stringsAsFactors=FALSE)
nums = sapply(mv, is.numeric)
mvModified = mv[,nums]
DirectorActorDuos1 = list()
DirectorActorDuos2 = list()
DirectorActorDuos3 = list()
DirectorActorDuos1 = mv[,c(2,7,12)]
DirectorActorDuos2 = mv[,c(2,11,12)]
DirectorActorDuos3 = mv[,c(2,15,12)]
DirectorActorDuos = unique(rbind(DirectorActorDuos1,DirectorActorDuos2,DirectorActorDuos3))
dsummary = DirectorActorDuos%>%group_by(director_name,actor_2_name)%>% summarise(n = n())
dsummary
str(dsummary)
str(dsummary)
dsummary[2,]
